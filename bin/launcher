#!/usr/bin/env node

var meow				= require('meow'),
		api					= require('../index'),
		pkg					= require('../package.json'),
		prettyjson	= require('prettyjson'),
		exitHook		= require('exit-hook'),
		minimist = {
			alias: {
				b: 'browser',  p: 'proxy',
				d: 'detached', H: 'headless',
				c: 'config',   u: 'update',
				h: 'help',     v: 'version'
			},
			'--': true, // Split argv into options and browser arguments
			boolean:	[ 'detached', 'headless' ],
			string:		[ 'config', 'proxy' ],
			default:	{ browser: 'chrome' }
		},
		cli = meow({ pkg: pkg, help: help() }, minimist),
		urls = cli.input,
		flags = cli.flags
;

// Additional browser arguments, everything after "--"
flags.options = flags[''];

if (flags.update) {
	log('Updating the browser cache..');

	api.update(flags.config, function(err, browsers) {
		if (err) {
			return console.error(err);
		}

		log('Done.\n');
		log(browsers);
	});
} else if (!urls.length) {
	// No arguments - list all available browsers
	log('Available browsers\n');
	api.detect(log);
} else {
	// Launch
	api(flags.config, function(err, launch) {
		if (err) {
			return console.error(err);
		}

		launch(urls[0], flags, function(err, instance) {
			if (err) {
				return console.error(err);
			}

			log('Instance started with PID %d: %s\n', instance.pid, instance.command);
			log('  ' + instance.args.join('\n  ') + '\n');

			if (flags.detached) {
				detach(instance);
			} else {
				bind(instance);
			}
		});
	});
}

// Helpers

function bind(instance) {
	var stopped = false;

	instance.on('stop', function( code ) {
		stopped = true;
		log('Instance stopped with exit code:', code);
		process.exit(code);
	});

	// Clean exit
	exitHook(function() {
		if (stopped) {
			return;
		}

		log('Stopping instance..');
		instance.stop();
	});
}

function detach(instance) {
	log('Detaching.');

	var child = instance.process;

	child.unref();
	child.stdin.unref();
	child.stdout.unref();
	child.stderr.unref();
}

function help() {
	return [
		'List browsers',	'> browser-launcher',
		'Launch browser',	'> browser-launcher [ options ] url [ -- args ]',
		render({
			'--browser   -b .. ': 'Name of browser to launch (chrome by default)',
			'--proxy     -p .. ': 'Proxy server URI',
			'--detached  -d    ': 'Keep browser open after killing script',
			'--headless  -H    ': 'Enable headless mode (requires Xvfb)'
		}),
		'Miscellaneous', render({
			'--config    -c .. ': 'Path to custom configuration file',
			'--update    -u    ': 'Update the cache',
			'--help      -h    ': 'Show this help and exit',
			'--version   -v    ': 'Print version and exit'
		})
	].join('\n\n');
}

// Temporary, somewhat pretty output
function log(data) {
	var args = [].slice.call(arguments);

	if (typeof data !== 'string') {
		args[0] = render(data);
	}

	console.log.apply(console, args);
}

function render(data) {
	return prettyjson.render(data, {
		dashColor: 'white'
	});
}
